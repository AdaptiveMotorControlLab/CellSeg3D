[project]
name = "napari_cellseg3d"
authors = [
    {name = "Cyril Achard", email = "cyril.achard@epfl.ch"},
    {name = "Maxime Vidal", email = "maxime.vidal@epfl.ch"},
    {name = "Mackenzie Mathis", email = "mackenzie@post.harvard.edu"},
]
readme = "README.md"
description = "Plugin for cell segmentation in 3D"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Framework :: napari",
    "Topic :: Software Development :: Testing",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Visualization",
]
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
    "numpy",
    "napari[all]>=0.4.14",
    "QtPy",
#    "opencv-python>=4.5.5",
#    "dask-image>=0.6.0",
    "scikit-image>=0.19.2",
    "matplotlib>=3.4.1",
    "tifffile>=2022.2.9",
#    "imageio-ffmpeg>=0.4.5",
    "imagecodecs>=2023.3.16",
    "torch>=1.11",
    "monai[nibabel,einops]>=0.9.0",
    "itk",
    "tqdm",
#    "nibabel",
#    "pillow",
    "pyclesperanto-prototype",
    "tqdm",
    "matplotlib",
]
dynamic = ["version", "entry-points"]

[project.urls]
Homepage  = "https://github.com/AdaptiveMotorControlLab/CellSeg3d"
Documentation = "https://adaptivemotorcontrollab.github.io/cellseg3d-docs/res/welcome.html"
Issues = "https://github.com/AdaptiveMotorControlLab/CellSeg3d/issues"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-data]
"*" = ["res/*.png", "code_models/models/pretrained/*.json", "*.yaml"]

[tool.ruff]
select = [
    "E", "F", "W",
    "A",
    "B",
    "D",
    "G",
    "I",
    "PT",
    "PTH",
    "RET",
    "SIM",
    "TCH",
    "NPY",
]
# Never enforce `E501` (line length violations) and 'E741' (ambiguous variable names)
# and 'G004' (do not use f-strings in logging)
# and 'A003' (Shadowing python builtins)
# and 'F401' (imported but unused)
ignore = ["E501", "E741", "G004", "A003", "F401"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs/conf.py",
    "napari_cellseg3d/_tests/conftest.py",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.black]
line-length = 79

[tool.isort]
profile = "black"
line_length = 79

[project.optional-dependencies]
#crf = [
#   "pydensecrf@git+https://github.com/lucasb-eyer/pydensecrf.git#egg=master",
#]
onnx-cpu = [
    "onnx",
    "onnxruntime"
]
onnx-gpu = [
    "onnx",
    "onnxruntime-gpu"
]
wandb = [
    "wandb"
]
dev = [
    "isort",
    "black",
    "ruff",
    "pre-commit",
    "tuna",
    "twine",
]
docs = [
    "jupyter-book",
]
test = [
    "pytest",
    "pytest_qt",
    "pytest-cov",
    "coverage",
    "tox",
    "twine",
#   "pydensecrf@git+https://github.com/lucasb-eyer/pydensecrf.git#egg=master",
    "onnx",
    "onnxruntime",
]
